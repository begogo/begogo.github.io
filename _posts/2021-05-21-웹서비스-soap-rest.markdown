---
layout: post
title:  "[WEB] 웹 서비스와 API | SOAP API | RESTful API"
date:   2021-05-21 05:08:02 +0900
categories: 
---

## **웹 서비스와 API | SOAP API | RESTful API** 

**1. API와 웹 서비스**


- **API(Application Programming Interface)**
  - 응용 프로그램에서 사용할 수 있도록, 운영 체제나 프로그래밍 언어가 제공하는 기능을 제어할 수 있게 만든 인터페이스
  - 컴퓨터과학에서 'API' 개념 자체는 웹에 국한되지 않음 (Window API, 리눅스 API, Java API, Web API 등)
  - 웹 서비스도 일종의 인터페이스 기능을 한다는 면에선 API의 일종으로 볼 수 있고, 웹 HTTP 상에서(간혹 SMTP) 동작하는 API라고 이해했음
- **웹 서비스**
  - 네트워크 상에서 서로 다른 종류의 디바이스들 간에 상호작용을 하기 위한 소프트웨어 시스템
  - 애플리케이션들이 플랫폼과 프로그래밍 언어와는 독립된 방식으로 서로 통신할 수 있도록 하는 표준화된 기술
  - a service offered by an electronic device to another electronic device, communicating with each other via the World Wide Web, serving web documents (HTML, JSON, XML, images)
  - 처음에 '웹 서비스'라고 단어가 생긴 계기는 초창기에 나온 SOAP 방식이 서비스 지향적이다 보니 서비스란 단어가 쓰인 것 같음 
  - 웹 서비스와 Web API는 둘 다 웹 상에서 인터페이스 기능을 한다는 점에서 유의어 관계인 것처럼 보이면서도 엄밀히 따진다면 차이가 있는 것 같음  
    - '웹 서비스'는 현재 얘기하는 일반적인 Web API를 지칭할 때 쓰이기도 하지만, 특정 문맥에서는 과거 SOAP 방식의 인터페이스 기술 쪽에 무게를 더 두는 느낌 
    - 'Web API'는 후술하게 될 HTTP/RESTful API 쪽에 무게를 더 두는 느낌  
    - 요즘은 SOAP 방식은 잘 안 쓴다고 들었는데 그게 맞다면 누군가 '웹 서비스'란 단어를 사용했을 때, 문맥 상 SOAP 기술과 큰 관련이 없어 보이면 Web API 정도로 치환해서 이해해도 되지 않을까 생각 


**2. SOAP(Simple Object Access Protocol) API**


<p align="center">
  <img src="/assets/image/soap2.png" width="" height="" title="" alt=""><br>
  출처: <a href="https://ettrends.etri.re.kr/ettrends/122/0905001533/25-2_112_120.pdf"><i>https://ettrends.etri.re.kr/ettrends/122/0905001533/25-2_112_120.pdf</i></a>
  </p>


- SOAP 웹 서비스의 추구방향: SOA(Service Oriented Arichitecture)
  - 플랫폼 중립: 하나의 서비스를 제공하면, 다양한 플랫폼의 클라이언트가 플랫폼 제약없이 서비스를 받아서 사용할 수 있게 함을 추구
  - 독립성: 플랫폼 이외에 발생하는 결합도까지 고려. 서비스를 사용하기 위해 알아야 하는 것들을 최소화. 클라이언트와 서버 간의 느슨한 결합을 통해 각각 독립적인 개발 지속 추구

- 서비스 제공자가 서비스하려는 자원을 UDDI라는 전역 서비스 저장소에 등록(publish)하여 공개하면, 서비스 요청자가 검색한 후 서비스 제공자와 HTTP의 응용 프로토콜인 SOAP를 이용하여 메시지를 주고받는 방식
- 서비스 제공자와 요청자가 주고받는 SOAP 메시지는 SOAP봉투(envelope), SOAP 헤더와 SOAP 몸체로 구성된 하나의 XML 문서로 표현됨
- **기술표준이 명확함**
- SOAP 메시지는 크기가 크고, 송수신 시 헤더와 몸체를 인코딩/디코딩해야 하는 단점

- WSDL (Web Service Description Language)
  - 웹 서비스에서 제공하는 기능들을 외부에서 이용할 수 있도록 그 사용방법을 알려주는 인터페이스 언어로 XML 기반으로 작성된 파일
  - 서로 다른 이기종 간에 웹 서비스를 제공하기 위해 약속된 구문으로 인터페이스의 정보를 기술하는 것
  - 웹 서비스의 URL정보, GET/POST, MIME 등 SOAP 메시지 전송을 위해 프로토콜 정보를 기술

- UDDI (Universal Description Discovery and Integration)
  - a platform-independent, Extensible Markup Language protocol that includes a (XML-based) registry, by which businesses worldwide can list themselves on the Internet, and a mechanism to register and locate web service applications.
  - 웹 서비스를 등록하고 검색할 수 있도록 하는 일종의 웹 서비스 전용 검색엔진


**3. RESTful API**
 
<p align="center">
  <img src="/assets/image/RESTful.png" width="" height="" title="" alt=""><br>
  출처: <a href="https://ettrends.etri.re.kr/ettrends/122/0905001533/25-2_112_120.pdf"><i>https://ettrends.etri.re.kr/ettrends/122/0905001533/25-2_112_120.pdf</i></a>
  </p>


<p align="center">
  <img src="/assets/image/soap-vs-rest.png" width="" height="" title="" alt=""><br>
  출처: <a href="https://ettrends.etri.re.kr/ettrends/122/0905001533/25-2_112_120.pdf"><i>https://ettrends.etri.re.kr/ettrends/122/0905001533/25-2_112_120.pdf</i></a>
  </p>



**REST(Representational State Transfer)의 정의**  

  - 자원을 이름(표현, Representational)으로 구분하여 해당 자원의 상태(State)를 주고 받는 것(Transfer)
  
      -  자원(resource)의 표현(representation)  
          - 자원: 해당 소프트웨어가 관리하는 모든 것  
          - -> Ex) 문서, 그림, 데이터, 해당 소프트웨어 자체 등  
          - 자원의 표현: 그 자원을 표현하기 위한 이름  
          - -> Ex) DB의 학생 정보가 자원일 때, ‘students’를 자원의 표현
      -  상태(정보) 전달
          - 데이터가 요청되어지는 시점에서 자원의 상태(정보)를 전달
          - JSON 혹은 XML를 통해 데이터를 주고 받는 것이 일반적
  - 월드 와이드 웹과 같은 분산 하이퍼미디어 시스템을 위한 소프트웨어 아키텍처 스타일  
      - REST는 기본적으로 웹의 기존 기술과 HTTP 프로토콜을 그대로 활용하기 때문에 웹의 장점을 최대한 활용할 수 있는 아키텍처 스타일
      - a way of providing interoperability between computer systems on the Internet.


**REST의 구체적인 개념**
- HTTP URI(Uniform Resource Identifier)와 MIME 타입을 통해 자원(Resource)을 명시하고, HTTP Method(POST, GET, PUT, DELETE)를 통해 해당 자원에 대한 CRUD Operation을 적용하는 것을 의미
    - 즉, REST는 자원 기반의 구조(ROA, Resource Oriented Architecture) 설계의 중심에 Resource가 있고 HTTP Method를 통해 Resource를 처리하도록 설계된 아키텍쳐를 의미  
    - ROA(Resource Oriented Architecture): 인터넷의 모든 콘텐츠(예, HTML, 텍스트, 이미지, 이메일 등)를 리소스 로 활용하기  위한 구조로서  REST가  지향하는  서비스 구조이며, 서비스 중심의 SOA(Service Oriented Archi-tecture)와 대비되는 개념
    
    - 웹 사이트의 이미지, 텍스트, DB 내용 등의 모든 자원에 고유한 ID인 HTTP URI를 부여 
    - CRUD Operation
        - Create : 생성(POST)
        - Read : 조회(GET)
        - Update : 수정(PUT)
        - Delete : 삭제(DELETE)
        - HEAD: header 정보 조회(HEAD)


**REST를 구성하는 아키텍처 스타일**

1. Client/Server Model: 월드 와이드 웹이 해당

2. Stateless : 각 요청에 클라이언트의 context가 서버에 저장되어서는 안됨

3. Cacheable : 클라이언트는 응답을 캐싱할 수 있어야 함

4. Layered System : 클라이언트는 서버에 직접 연결되었는지 미들웨어에 연결되었는지 알 필요가 없어야 함

5. Code on demand(option) : 서버에서 코드를 클라이언트에게 보내서 실행하게 할 수 있어야 함

6. uniform interface : 자원은 유일하게 식별가능해야하고, HTTP Method로 표현을 담아야 하고, 메세지는 스스로를 설명(self-descriptive)해야하고, 하이퍼링크를 통해서 애플리케이션의 상태가 전이(HATEOAS: Hypermedia As The Engine Of Application State)되어야 함

    - 왜 uniform interface에 강조가 되어있냐면, 1~5번의 제약 조건은 HTTP를 기반으로하는 REST는 HTTP에서 이미 충분히 지켜지고 있는 부분이라서 비교적 덜 주의를 기울여도 됨

    - RESTful하려면 uniform interface를 잘 지켜야 하고, 그 중에서도 HATEOAS와 self-descriptive를 잘 지켜야 함



**RESTful API란?**

- RESTful API라는 용어는 위의 REST 아키텍처 스타일을 충분히 만족하는 API

- 엄밀히 정의한다면 RESTful 하지 않은 API는 HTTP API라고 표현하는 게 더 적합한 용어라고 한다.






---------------------------

<br>
## 참고자료


<https://en.wikipedia.org/wiki/Web_service>


<https://stackoverflow.com/questions/808421/api-vs-webservice>


<https://nordicapis.com/what-is-the-difference-between-web-services-and-apis>


<https://softwareengineering.stackexchange.com/questions/38691/difference-between-web-api-and-web-service>


<https://stackoverflow.com/questions/34388576/restful-web-services-and-restful-api>


- SOAP, RESTful

<https://www.nextree.co.kr/p11842>


<https://technet.tmaxsoft.com/upload/download/online/jeus/pver-20140827-000001/web-service/chapter_introduction.html#sect_understanding_webservice>


<https://ettrends.etri.re.kr/ettrends/122/0905001533/25-2_112_120.pdf>


<https://gmlwjd9405.github.io/2018/09/21/rest-and-restful.html>


<https://itwarehouses.tistory.com/5>


<https://ko.wikipedia.org/wiki/REST>


<https://stackoverflow.com/questions/671118/what-exactly-is-restful-programming?rq=1>


<https://stackoverflow.com/questions/1966243/restful-api-documentation>


<https://www.youtube.com/watch?v=RP_f5dMoHFc> (그런 REST API로 괜찮은가)

<https://velog.io/@kjh03160/%EA%B7%B8%EB%9F%B0-REST-API%EB%A1%9C-%EA%B4%9C%EC%B0%AE%EC%9D%80%EA%B0%80>




