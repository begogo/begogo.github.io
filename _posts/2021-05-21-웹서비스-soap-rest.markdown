---
layout: post
title:  "[WEB] 웹 서비스와 API | SOAP | RESTful"
date:   2021-05-21 05:08:02 +0900
categories: 
---

## **웹 서비스와 API | SOAP | RESTful** 

**1. API와 웹 서비스**


- **API(Application Programming Interface)**
  - 응용 프로그램에서 사용할 수 있도록, 운영 체제나 프로그래밍 언어가 제공하는 기능을 제어할 수 있게 만든 인터페이스
  - 컴퓨터과학에서 'API' 개념 자체는 웹에 국한되지 않음 (Window API, 리눅스 API, Java API, Web API 등)
  - 웹 서비스도 일종의 인터페이스 기능을 한다는 면에선 API의 일종으로 볼 수 있고, 웹 HTTP 상에서(간혹 SMTP) 동작하는 API라고 이해했음
- **웹 서비스**
  - 네트워크 상에서 서로 다른 종류의 디바이스들 간에 상호작용을 하기 위한 소프트웨어 시스템
  - 애플리케이션들이 플랫폼과 프로그래밍 언어와는 독립된 방식으로 서로 통신할 수 있도록 하는 표준화된 기술
  - a service offered by an electronic device to another electronic device, communicating with each other via the World Wide Web, serving web documents (HTML, JSON, XML, images)
  - 시기적으로 현재보다 과거에 더 많이 쓰였던 단어라고 추측됨. 처음에 출현한 SOAP 방식이 서비스 지향이다 보니 서비스란 단어가 쓰인 것 같고, 그런 SOAP 방식을 쓰는 인터페이스 기술을 웹 서비스라고 불러왔던 것으로 보임 
  - 웹 서비스와 Web API는 둘 다 웹 상에서 인터페이스 기능을 한다는 점에서 유의어 관계인 것처럼 보이면서도 엄밀히 따지면 차이가 있는 것 같음  
    - '웹 서비스'는 과거 SOAP 방식의 인터페이스 기술 쪽에 무게를 더 두는 느낌 
    - 'Web API'는 후술하게 될 HTTP/RESTful API 쪽에 무게를 더 두는 느낌  
    - 요즘은 SOAP 방식은 잘 안 쓴다고 들었는데 그게 맞다면 누군가 '웹 서비스'란 단어를 사용했을 때, 문맥 상 SOAP 기술과 큰 관련이 없어 보이면 Web API 정도로 치환해서 이해해도 되지 않을까 생각 


**2. SOAP(Simple Object Access Protocol) API**


<p align="center">
  <img src="/assets/image/soap2.png" width="" height="" title="" alt=""><br>
  출처: <a href="https://ettrends.etri.re.kr/ettrends/122/0905001533/25-2_112_120.pdf"><i>https://ettrends.etri.re.kr/ettrends/122/0905001533/25-2_112_120.pdf</i></a>
  </p>


- SOAP 웹 서비스의 추구방향: SOA(Service Oriented Arichitecture)
  - 플랫폼 중립: 하나의 서비스를 제공하면, 다양한 플랫폼의 클라이언트가 플랫폼 제약없이 서비스를 받아서 사용할 수 있게 함을 추구
  - 독립성: 플랫폼 이외에 발생하는 결합도까지 고려. 서비스를 사용하기 위해 알아야 하는 것들을 최소화. 클라이언트와 서버 간의 느슨한 결합을 통해 각각 독립적인 개발 지속 추구

- 서비스 제공자가 서비스하려는 자원을 UDDI라는 전역 서비스 저장소에 등록(publish)하여 공개하면, 서비스 요청자가 검색한 후 서비스 제공자와 HTTP의 응용 프로토콜인 SOAP를 이용하여 메시지를 주고받는 방식
- 서비스 제공자와 요청자가 주고받는 SOAP 메시지는 SOAP봉투(envelope), SOAP 헤더와 SOAP 몸체로 구성된 하나의 XML 문서로 표현됨
- **기술표준이 명확함**
- SOAP 메시지는 크기가 크고, 송수신 시 헤더와 몸체를 인코딩/디코딩해야 하는 단점

- WSDL (Web Service Description Language)
  - 웹 서비스에서 제공하는 기능들을 외부에서 이용할 수 있도록 그 사용방법을 알려주는 인터페이스 언어로 XML 기반으로 작성된 파일
  - 서로 다른 이기종 간에 웹 서비스를 제공하기 위해 약속된 구문으로 인터페이스의 정보를 기술하는 것
  - 웹 서비스의 URL정보, GET/POST, MIME 등 SOAP 메시지 전송을 위해 프로토콜 정보를 기술

- UDDI (Universal Description Discovery and Integration)
  - a platform-independent, Extensible Markup Language protocol that includes a (XML-based) registry, by which businesses worldwide can list themselves on the Internet, and a mechanism to register and locate web service applications.
  - 웹 서비스를 등록하고 검색할 수 있도록 하는 일종의 웹 서비스 전용 검색엔진


**3. RESTful API**
 
<p align="center">
  <img src="/assets/image/RESTful.png" width="" height="" title="" alt=""><br>
  출처: <a href="https://ettrends.etri.re.kr/ettrends/122/0905001533/25-2_112_120.pdf"><i>https://ettrends.etri.re.kr/ettrends/122/0905001533/25-2_112_120.pdf</i></a>
  </p>


<p align="center">
  <img src="/assets/image/soap-vs-rest.png" width="" height="" title="" alt=""><br>
  출처: <a href="https://ettrends.etri.re.kr/ettrends/122/0905001533/25-2_112_120.pdf"><i>https://ettrends.etri.re.kr/ettrends/122/0905001533/25-2_112_120.pdf</i></a>
  </p>



**REST란**

REST의 정의  
-  “Representational State Transfer” 의 약자  
    - 자원을 이름(자원의 표현)으로 구분하여 해당 자원의 상태(정보)를 주고 받는 모든 것을 의미한다.
    - 즉, 자원(resource)의 표현(representation) 에 의한 상태 전달  

        -  자원(resource)의 표현(representation)  
            - 자원: 해당 소프트웨어가 관리하는 모든 것  
            - -> Ex) 문서, 그림, 데이터, 해당 소프트웨어 자체 등  
            - 자원의 표현: 그 자원을 표현하기 위한 이름  
            - -> Ex) DB의 학생 정보가 자원일 때, ‘students’를 자원의 표현으로 정한다.  
        -  상태(정보) 전달
            - 데이터가 요청되어지는 시점에서 자원의 상태(정보)를 전달한다.
            - JSON 혹은 XML를 통해 데이터를 주고 받는 것이 일반적이다.
    - 월드 와이드 웹(www)과 같은 분산 하이퍼미디어 시스템을 위한 소프트웨어 개발 아키텍처의 한 형식  
        - REST는 기본적으로 웹의 기존 기술과 HTTP 프로토콜을 그대로 활용하기 때문에 웹의 장점을 최대한 활용할 수 있는 아키텍처 스타일이다.
        - REST는 네트워크 상에서 Client와 Server 사이의 통신 방식 중 하나이다.  


REST의 구체적인 개념
- HTTP URI(Uniform Resource Identifier)를 통해 자원(Resource)을 명시하고, HTTP Method(POST, GET, PUT, DELETE)를 통해 해당 자원에 대한 CRUD Operation을 적용하는 것을 의미한다.
    - 즉, REST는 자원 기반의 구조(ROA, Resource Oriented Architecture) 설계의 중심에 Resource가 있고 HTTP Method를 통해 Resource를 처리하도록 설계된 아키텍쳐를 의미한다.  
    - ROA(Resource Oriented Architecture): 인터넷의 모든 콘텐츠(예, HTML, 텍스트, 이미지, 이메일 등)를 리소스 로 활용하기  위한 구조로서  REST가  지향하는  서비스 구조이며, 서비스 중심의 SOA(Service Oriented Archi-tecture)와 대비되는 개념
    
    - 웹 사이트의 이미지, 텍스트, DB 내용 등의 모든 자원에 고유한 ID인 HTTP URI를 부여한다.
    - CRUD Operation
        - Create : 생성(POST)
        - Read : 조회(GET)
        - Update : 수정(PUT)
        - Delete : 삭제(DELETE)
        - HEAD: header 정보 조회(HEAD)

REST의 장단점

    장점
        HTTP 프로토콜의 인프라를 그대로 사용하므로 REST API 사용을 위한 별도의 인프라를 구출할 필요가 없다.
        HTTP 프로토콜의 표준을 최대한 활용하여 여러 추가적인 장점을 함께 가져갈 수 있게 해준다.
        HTTP 표준 프로토콜에 따르는 모든 플랫폼에서 사용이 가능하다.
        Hypermedia API의 기본을 충실히 지키면서 범용성을 보장한다.
        REST API 메시지가 의도하는 바를 명확하게 나타내므로 의도하는 바를 쉽게 파악할 수 있다.
        여러가지 서비스 디자인에서 생길 수 있는 문제를 최소화한다.
        서버와 클라이언트의 역할을 명확하게 분리한다.
    단점
        표준이 존재하지 않는다.
        사용할 수 있는 메소드가 4가지 밖에 없다.
            HTTP Method 형태가 제한적이다.
        브라우저를 통해 테스트할 일이 많은 서비스라면 쉽게 고칠 수 있는 URL보다 Header 값이 왠지 더 어렵게 느껴진다.
        구형 브라우저가 아직 제대로 지원해주지 못하는 부분이 존재한다.
            PUT, DELETE를 사용하지 못하는 점
            pushState를 지원하지 않는 점
https://gmlwjd9405.github.io/2018/09/21/rest-and-restful.html





4. 그런 REST API로 괜찮은가


  TODO


---------------------------

<br></br>
## 참고자료


<https://en.wikipedia.org/wiki/Web_service>


<https://stackoverflow.com/questions/808421/api-vs-webservice>


<https://nordicapis.com/what-is-the-difference-between-web-services-and-apis>


<https://softwareengineering.stackexchange.com/questions/38691/difference-between-web-api-and-web-service>


<https://www.nextree.co.kr/p11842>


<https://technet.tmaxsoft.com/upload/download/online/jeus/pver-20140827-000001/web-service/chapter_introduction.html#sect_understanding_webservice>


<https://ettrends.etri.re.kr/ettrends/122/0905001533/25-2_112_120.pdf>


<https://gmlwjd9405.github.io/2018/09/21/rest-and-restful.html>


<https://stackoverflow.com/questions/34388576/restful-web-services-and-restful-api>


<https://itwarehouses.tistory.com/5>


<https://stackoverflow.com/questions/671118/what-exactly-is-restful-programming?rq=1>


<https://stackoverflow.com/questions/1966243/restful-api-documentation>


<https://www.youtube.com/watch?v=RP_f5dMoHFc> (그런 REST API로 괜찮은가)




