---
layout: post
title:  "[WEB] 웹의 개념"
date:   2021-05-21 05:08:02 +0900
categories: 
---

# 웹의 개념



## **1. 기초 용어 정리: 웹, 인터넷...**

<p align="center">
    <img src="/assets/image/인터넷과웹.png" width="40%" height="30%" title="인터넷과웹" alt="인터넷과웹"><br>
    출처: <a href="https://opentutorials.org/module/3097/18040"><i>생활코딩</i></a>
</p>


+ **인터넷 != 웹**  
+ **인터넷**: 컴퓨터로 연결하여 TCP/IP(Transmission Control Protocol/Internet Protocol)라는 통신 프로토콜을 이용해 정보를 주고받는 컴퓨터 네트워크
+ **웹(World Wide Wep, WWW, W3)**: 인터넷 상에서 접근 가능한, URL로 식별되며 하이퍼링크로 연결되는 웹 리소스들이 있는 정보 공간  
    - HTML(HyperText Markup Language): 정보의 내용
      - 웹 페이지를 구성하는 마크업 언어로 정보자원 사이를 오가기 위한 하이퍼텍스트
      - 웹 브라우저 같은 HTML 처리 장치의 행동에 영향을 주는 자바스크립트와 웹 페이지의 외관과 배치를 정의하는 CSS 같은 스크립트를 불러올 수 있다.
    - URL(Uniform Resource Locator): 정보의 위치 표현
      - 네트워크 상 리소스에 대한 reference
      - 리소스가 어디 위치하는지 알려주기 위해 만든 포맷
    - HTTP(HyperText Transfer Protocol): 정보의 전송 방식
      - 웹 상에서 HTML과 같은 하이퍼미디어 문서를 전송하기위한 [애플리케이션 레이어](https://en.wikipedia.org/wiki/Application_layer) 프로토콜 
         

## **2. Server, Client 에 대한 이해**

+ 클라이언트-서버 모델: 서비스 요청자인 클라이언트와 서비스 자원의 제공자인 서버 간 작업을 분리해주는 분산 애플리케이션 구조이자 네트워크 아키텍처
+ 웹에서는 웹 서버가 서버 역할을 하고 사용자가 쓰는 웹 브라우저가 클라이언트 역할
### - 웹의 기초 동작원리

<p align="center">
    <img src="/assets/image/webflow.png" width="" height="" title="" alt=""><br>
    웹의 동작원리: <a href="https://tcpschool.com/webbasic/works"><i>https://tcpschool.com/webbasic/works</i></a>
</p>


①② 사용자가 웹 브라우저를 통해 찾고 싶은 웹 페이지의 URL 주소를 입력함  

③ 사용자가 입력한 URL 주소 중에서 도메인 네임(domain name) 부분을 DNS 서버에서 검색함  

④ DNS 서버에서 해당 도메인 네임에 해당하는 IP 주소를 찾아 사용자가 입력한 URL 정보와 함께 전달함  

⑤⑥ 웹 페이지 URL 정보와 전달받은 IP 주소는 HTTP 프로토콜을 사용하여 HTTP 요청 메시지를 생성함. 이렇게 생성된 HTTP 요청 메시지는 TCP 프로토콜을 사용하여 인터넷을 거쳐 해당 IP 주소의 컴퓨터로 전송됨  

⑦ 이렇게 도착한 HTTP 요청 메시지는 HTTP 프로토콜을 사용하여 웹 페이지 URL 정보로 변환됨  

⑧ 웹 서버는 도착한 웹 페이지 URL 정보에 해당하는 데이터를 검색함  

⑨⑩ 검색된 웹 페이지 데이터는 또 다시 HTTP 프로토콜을 사용하여 HTTP 응답 메시지를 생성함. 이렇게 생성된 HTTP 응답 메시지는 TCP 프로토콜을 사용하여 인터넷을 거쳐 원래 컴퓨터로 전송됨  

⑪ 도착한 HTTP 응답 메시지는 HTTP 프로토콜을 사용하여 웹 페이지 데이터로 변환됨  

⑫ 변환된 웹 페이지 데이터는 웹 브라우저에 의해 출력되어 사용자가 볼 수 있게 됨

### - 현대 웹 아키텍처


<p align="center">
    <img src="/assets/image/Modern-web-application-architecture-overview.png" width="" height="" title="" alt=""><br>
    현대 웹 아키텍처: <a href="https://medium.com/videoblocks-engineering/web-architecture-101-a3224e126947"><i>https://medium.com/videoblocks-engineering/web-architecture-101-a3224e126947</i></a>
</p>



## **3-1. HTTP(Hyper Text Transfer Protocol) 기초 개념**
- 웹 상에서 HTML과 같은 하이퍼미디어 문서를 전송하기위한 [애플리케이션 레이어](https://en.wikipedia.org/wiki/Application_layer) 프로토콜
- 전송 계층(Transport Layer)에서 TCP를 사용하여 클라이언트(웹 브라우저)와 서버(웹 서버) 간 통신
- 신뢰성있는 데이터 전송 프로토콜인 TCP를 사용하기 때문에 개발자는 데이터 손상에 대한 걱정없이 비즈니스 로직 구현에만 집중할 수 있음. (TCP는 데이터 전송순서, 신뢰성 보장하지만 UDP에 비해 느리다는 단점)
- 웹에서 이루어지는 모든 데이터 교환의 기초 

- **요청(Request)/응답(Response) 방식**
    + 웹 클라이언트가 서버에 TCP 접속을 처리한 후 요청 메시지를 보내면, 웹서버는 요청 메시지를 근거로 서비스를 처리한 다음, 그 결과인 응답 메시지를 클라이언트에 보냄  

- **무연결성(Connectionless)**  
    + 일반적인 클라이언트-서버 모델에선 연결을 유지한 상태로 통신
    + **HTTP는 연결을 유지하지 않은 상태로 데이터를 주고받을 수 있음**
    + 클라이언트로부터 요청이 들어와 서버가 응답하면 클라이언트와 서버의 연결을 끊고 클라이언트가 새로 요청하면 또 다른 연결을 맺는 방식. 이때의 연결은 이전과는 아무 상관없는 새로운 연결
    + 이로 인해 연결/해제에 대한 오버헤드 발생하는 단점
    + **KeppAlive** 속성의 필요성: 지정된 시간동안 서버와 클라이언트 사이에서 패킷 교환이 없을 경우, 상대방의 안부를 묻기위해 패킷을 주기적으로 보냄. 이 때 패킷에 반응이 없으면 접속 끊음

- **무상태(Stateless)**
    + 무연결성 때문에 이전 연결에서 했던 작업내용을 다음 요청에서 그대로 사용할 수 없음
    + 서버가 이 클라이언트가 이전에 통신했던 클라이언트인지 아닌지 식별할 수 없다는 것
    + 이렇게 요청마다 서로 다른 연결로 인식되어 요청 간에 정보를 공유해서 사용할 수 없는 상태, 즉 상태정보가 유지되지 않는 특성이 무상태
    + 따라서 HTTP를 사용하는 웹에서는 이전 요청 시 사용한 정보를 이후 요청에서도 계속 사용하고 싶다면, 서버나 클라이언트 측에 정보를 저장해두고 계속 상태정보를 유지한 후 사용하는 정보 유지기술이 필요
    + 상태를 기억하는 방법: 아래 기술을 필요한 상황에서 적절히 활용
      - **쿠키** 
        - 브라우저 단에서 쿠키라는 것을 저장하여 서버가 클라이언트를 식별할 수 있도록 함
        - 사용자 정보가 브라우저에 저장되기 때문에 공격자로부터 위변조의 가능성이 높아 보안에 취약
      - **세션** 
        - 브라우저가 아닌 서버단에서 사용자 정보를 저장하는 구조
        - 세션 정보도 중간에 탈취 당할 수 있기 때문에 보안에 완벽하다고 할 수 없음
        - 또한 세션을 사용하면 서버에 사용자 정보를 저장하므로, 서버의 메모리를 차지하게 되고, 만약 동시 접속자 수가 많은 서비스일 경우에는 서버 과부화의 원인
      - **토큰을 사용하는 OAuth, JWT**
        - 쿠키와 세션의 문제점들을 보완하기 위한 토큰 기반의 인증 방식
        - 보호할 데이터를 토큰으로 치환하여 원본 데이터 대신 토큰을 사용하는 기술
        - 중간에 공격자로부터 토큰이 탈취당하더라도 데이터에 대한 정보를 알 수 없으므로, 보안성을 높인 기술
    

## **3-2. HTTP 메시지 구조**  

<p align="center">
    <img src="/assets/image/HTTPMsgStructure.png" width="" height="" title="" alt=""><br>
    출처: <a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Messages"><i>MDN Web Docs</i></a>
</p>


1. Start-line: 실행되어야 할 요청, 또는 요청 수행에 대한 성공 또는 실패가 기록. 항상 한 줄로 끝남  
2. HTTP headers: 요청에 대한 설명, 혹은 메시지 본문에 대한 설명. key:value 구조  
3. 빈줄: 요청에 대한 모든 메타 정보가 전송되었음을 알림 
4. body: 요청과 관련된 내용(HTML 폼 콘텐츠 등)이 옵션으로 들어가거나, 응답과 관련된 문서. 본문의 존재 유무 및 크기는 첫 줄과 HTTP 헤더에 명시

### **HTTP Requests**

<p align="center">
    <img src="/assets/image/HTTP_Request_Headers2.png" width="" height="" title="" alt=""><br>
    출처: <a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Messages"><i>MDN Web Docs</i></a>
</p>


1. **Request-line(스타트라인)**  
    1-1. HTTP 메서드(요청방식): 웹 클라이언트가 웹서버에 요청하는 서비스 처리 방식  
    - GET: 브라우저에서 캐시가 가능하며 클라이언트가 서버로 전송하는 문자열이 있을 때는 요청정보 헤더의 요청 줄에 포함되는 URI 뒤에 ? 기호와 함께 추가되어 전달. 그래서 클라이언트에서 서버로 보내는 모든 문자열 정보들이 웹 브라우저에 노출되는 특징이 있으며, 헤더에 포함되므로 전달되는 문자열의 크기에 제한이 있음. 가장 단순한 요청방식으로 서버에 빠른 속도로 요청할 때 사용  

    - POST: 데이터가 HTTP 요청정보의 몸체에 포함되어 전달. 따라서 데이터 크기에 제한이 없고, 화면에 노출되지 않음. 그러나 POST는 웹 클라이언트 측에서 보내는 데이터를 인코딩하고, 서버 측에서 디코딩해야 하므로 GET보다 상대적으로 처리속도가 느림. 주로 서버 측의 정보를 새로 생성하는 작업에 사용  

    - PUT: 파일 업로드할 때 이용할 수 있음. POST와 PUT 방식 모두 같은 작업을 수행할 수 있음. 일반적으로 서버으 리소스를 새로 생성할 때(CREATE OR INSERT)는 POST 방식으로 요청하고, 서버의 리소스를 수정할 때(UPDATE)는 PUT 방식으로 구분하여 요청  
    
    - DELETE: 서버의 리소스를 삭제하는 작업을 요청할 때 사용  
    
    - OPTIONS: 요청 URI에 대해 허용되는 통신 옵션을 알고자 할 때 사용  
    
    - HEAD: GET 방식과 같으나 요청정보의 몸체 없이 헤더 정보만 요청하는 방식. 해당 자원이 존재하는지, 또는 서버에 문제가 있는지를 확인하기 위해 사용  
    
    - TRACE: 웹 클라이언트의 요청을 그대로 반환하는 방식으로 요청 정보가 웹섭에 도달하기까지의 경로를 기록. TRACE 방식은 ECHO 서비스로 서버 상태를 확인하기 위한 목적으로 사용  
    
    - CONNECT: 프록시에 사용하기 위해 예약된 메소드로서 프록시가 동적으로 접속할 수 있게 지원  
    
    1-2. URI: 요청한 페이지에 대한 정보 *(하단에서 URI, URL 개념과 차이 정리)*
        
    1-3. HTTP 버전 정보: 메시지의 남은 구조를 결정하기 때문에, 응답 메시지에서 써야 할 HTTP 버전을 알려주는 역할

2. **header**

- General 헤더: Via와 같은 헤더는 메시지 전체에 적용됩니다.
- Request 헤더: User-Agent (en-US), Accept-Type와 같은 헤더는 요청의 내용을 좀 더 구체화 시키고(Accept-Language), 컨텍스를 제공하기도 하며(Referer), 조건에 따른 제약 사항을 가하기도 하면서(If-None) 요청 내용을 수정합니다.
- Entity 헤더: Content-Length와 같은 헤더는 요청 본문에 적용됩니다. 당연히 요청 내에 본문이 없는 경우 entity 헤더는 전송되지 않습니다.

3. **body**  
- 모든 요청에 본문이 들어가지는 않습니다. GET, HEAD, DELETE , OPTIONS처럼 리소스를 가져오는 요청은 보통 본문이 필요가 없습니다. 일부 요청은 업데이트를 하기 위해 서버에 데이터를 전송합니다. 보통 (HTML 폼 데이터를 포함하는) POST 요청일 경우에 그렇습니다.
- 종류
    - 단일-리소스 본문(single-resource bodies): 헤더 두 개(Content-Type와 Content-Length)로 정의된 단일 파일로 구성됩니다.
    - 다중-리소스 본문(multiple-resource bodies): 멀티파트 본문으로 구성되는 다중 리소스 본문에서는 파트마다 다른 정보를 지니게 됩니다. 보통 HTML 폼과 관련이 있습니다.

### **HTTP Responses**

<p align="center">
    <img src="/assets/image/HTTP_Response_Headers2.png" width="" height="" title="" alt=""><br>
    출처: <a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Messages"><i>MDN Web Docs</i></a>
</p>

1. **Status-line(스타트라인)**  
- HTTP 버전: 서버가 응답하기 위해 사용하는 HTTP 버전 정보
- 상태 코드(Status-Code): 클라이언트의 요청에 대한 처리 결과. 3자리 숫자
    - 1xx: 조건부 응답
    - 2xx: 성공
      - 200 OK: 클라이언트의 요청을 성공적으로 처리함  
    - 3xx: 리디렉션
      - 304 Not Modified: 캐시를 목적으로 사용. 클라이언트에게 응답이 수정되지 않았음을 알려주며, 그러므로 클라이언트는 계속해서 응답의 캐시된 버전을 사용할 수 있음을 알림
    - 4xx: 클라이언트 오류
      - 400 Bad Request: 클라이언트의 요청에 문법적인 오류 등 잘못된 요청으로 서버가 요청을 해석할 수 없는 경우
      - 401 Unauthorized: 인증 오류로서 클라이언트가 잘못된 인증 정보를 인증 헤더에 넣었음
      - 403 Forbidden: 사용자 허가 모드 오류로서 클라이언트의 인증 정보에 상관없이 페이지 접근을 거부하는 것
      - 404 Not Found: 클라이언트가 요청한 문서가 존재하지 않음. 즉, 요청 URI를 서버가 찾지 못함
      - 405 Method Not Allowed: 클라이언트가 요청한 서비스 요청방식을 웹서버에서 지원하지 않음을 의미
    - 5xx: 서버 오류
      - 500 Internal Server Error: 서버 프로그램 실행 시 오류가 발생하여 서버 프로그램이 실행을 멈추었거나 올바르지 않은 응답 헤더 정보가 설정되었을 때 발생
- 상태 코드 설명(Reason-Phrase): 상태 코드를 이해하기 쉬운 텍스트로 표현


2. **header**

- General 헤더: Via와 같은 헤더는 메시지 전체에 적용됩니다.  
- Response 헤더: Vary와 Accept-Ranges와 같은 헤더는 상태 줄에 미처 들어가지 못했던 서버에 대한 추가 정보를 제공합니다.
- Entity 헤더: Content-Length와 같은 헤더는 요청 본문에 적용됩니다. 당연히 요청 내에 본문이 없는 경우 entity 헤더는 전송되지 않습니다.

3. **body**  
- 본문이 없을 수도 있음. 201, 204과 같은 상태 코드를 가진 응답에는 보통 본문이 없음
- 종류  
    - 이미 길이가 알려진 단일 파일로 구성된 단일-리소스 본문: 헤더 두개(Content-Type과 Content-Length)로 정의 합니다.
    - 길이를 모르는 단일 파일로 구성된 단일-리소스 본문: Transfer-Encoding이 chunked로 설정되어 있으며, 파일은 청크로 나뉘어 인코딩 되어 있습니다.
    - 서로 다른 정보를 담고 있는 멀티파트로 이루어진 다중 리소스 본문: 이 경우는 상대적으로 위의 두 경우에 비해 보기 힘듭니다.

## **4. 웹 리소스**

### **웹 리소스란?**
  - 웹에서 식별 가능한 모든 것
  - URI로 식별
  - 웹서버는 웹 리소스를 관리하고 제공
  - 정적 웹페이지: 클라이언트가 웹 리소스를 요청하면, 웹서버는 이미 만들어져 있는 문서를 클라이언트에 응답. 개발자가 문서를 변경하지 않는 한 항상 같은 내용: HTML, JPG 등
  - 동적 웹페이지: 요청 시마다 다른 웹 리소스의 내용을 클라이언트로 전달하는 것 
    - 방법1: 클라이언트가 서버에 웹 리소스를 요청하면 리소스에 동적인 요소를 포함하는 방식(스크립트 방식) - JSP
    - 방법2: 클라이언트가 서버에 웹 리소스를 요청하면 서버가 다른 애플리케이션을 통해 웹 리소스를 재생성하여 제공하는 방식 - 서블릿
    - 동적 웹페이지 작성 기술: CGI, ASP, PHP, 서블릿과 JSP 등  

<p align="center">
    <img src="/assets/image/static-vs-dynamic.png" width="" height="" title="" alt=""><br>
    출처: <a href="https://gmlwjd9405.github.io/2018/10/27/webserver-vs-was.html"><i>https://gmlwjd9405.github.io/2018/10/27/webserver-vs-was.html</i></a>
</p>


      
### **미디어 타입**
  - 웹서버는 모든 HTTP 객체 데이터에 MIME 타입을 붙임
  - MIME (Multipurpose Internet Mail Extensions)   
    - 이메일과 함께 동봉할 파일을 텍스트 문자로 전환해서 이메일시스템을 통해 전달하려고 개발되었지만 
    - 현재는 웹에서 클라이언트에게 전송된 문서의 다양성을 알려주기 위한 메커니즘으로 쓰임
  - 웹브라우저는 서버로부터 객체를 돌려 받을 때 다를 수 있는 객체인지 MIME 타입을 통해 확인
  - 구조: 사선(/)으로 구분된 주타입,부타입으로 이루어진 문자열들 (type/subtype)
    - 예) image/jpeg, text/html, video/mp4 등
  
### **URI, URL, URN**

<p align="center">
    <img src="/assets/image/uri-url-urn.jpg" width="" height="" title="" alt=""><br>
    출처: <a href="https://stackoverflow.com/questions/4913343/what-is-the-difference-between-uri-url-and-urn"><i>What is the difference between URI, URL and URN? [duplicate]</i></a>
</p>


<p align="center">
    <img src="/assets/image/URN-URL-URI.png" width="50%" height="" title="" alt=""><br>
    출처: <a href="https://images.app.goo.gl/1xy1N2pDwePWMbGn6"><i>https://images.app.goo.gl/1xy1N2pDwePWMbGn6</i></a>
</p>

  - URI (uniform resource identifier) : 통합 자원 식별자
    - URI is a string of characters used to identify a name or a resource on the Internet such as http, https and ftp. 
    - A URI identifies a resource either by location, name, or both.
    - A URI has two specializations known as URL and URN. 
    - URLs, URNs are all types of URI.
  - URL (uniform resource Locator) : 통합 자원 지시자
    - URL specifies where an identified resource is available and the mechanism for retrieving it.
    - A URL defines how the resource can be obtained.
    - It does not have to be HTTP URL (http://), a URL can also be (ftp://) or (smb://).
    - 리소스가 옮겨지면 URL은 더이상 사용할 수 없다.
  - URN (uniform resource Name) : 통합 자원 이름
    - URN Identifies a resource by a unique and persistent name, but doesn’t necessarily tell you how to locate it on the internet.
    - 객체의 위치와 상관없이 이름으로 리소스를 찾는 방식
  - URI 형식
  <p align="center">
    <img src="/assets/image/uriurl1.png" width="" height="" title="" alt=""><br>
    출처: <a href="http://www.hakawati.co.kr/361"><i>http://www.hakawati.co.kr/361</i></a>
    </p>

    <scheme>://<username>:<passwrod>@<host>:<port>/<path>;<parameter>?<query>#<fragment>


  - scheme(프로토콜): 서버와 통신하기 위한 규약. 서버마다 정해져있음. 웹서버는 http, 오라클 DBMS는 jdbc:oracle:thin:@ 등
  - userinfo: 유저 정보
  - host(서버 주소): 네트워크상에서 연결된 컴퓨터를 찾아가기 위한 정보, IP 주소 또는 도메인 이름으로 표현. 서버가 동작하고 있는 컴퓨터 정보
  - port: URL에서 서버 주소를 이용해 컴퓨터를 찾았다면 포트 번호는 컴퓨터에서 동작하고 있는 서버로 접속하기 위한 정보
  - URI: 서버에서 서비스하는 리소스의 식별자 


## **5. 통신 프로토콜**

  <p align="center">
    <img src="/assets/image/프로토콜구조2.png" width="" height="" title="" alt=""><br>
    출처: <a href="https://33cram.tistory.com/60"><i>https://33cram.tistory.com/60</i></a>
    </p>


**TCP/IP 4계층 프로토콜** 


1. **응용 계층 (Application Layer)**
 - 이용자의 적용 업무를 처리하는데 필요한 모든 기능을 이용자측에서
   정의하고 처리
 - 시스템 공용 자원의 관리, 응용에 할당된 자원으로의 접근 관리나 완전성 제어,
   응용 프로그램의 실행 등의 기능 제공
    - HTTP: 웹 상에서 HTML과 같은 하이퍼미디어 문서를 전송
    - HTTPS: 보안을 위해 HTTP의 양 끝단에서 보안 소켓 계층(SSL: Secure Sockets Layer)을 사용
    - POP3: 서버에 보관된 수신 메일을 꺼내옴
    - SMTP: 메일 송신
    - FTP: 파일 전송
    - Telnet: 컴퓨터를 원격으로 제어
    - SSH: 보안을 위해 컴퓨터를 원격으로 제어하는 과정을 암호화
    - SSL: 보안을 위해 통신 과정에서 주고받는 데이터를 암호화
    - SMB: 윈도우 컴퓨터와 파일을 공유함
    - DHCP: 컴퓨터에게 프라이빗 IP를 동적으로 할당
    - DNS: 도메인 이름과 IP 주소를 서로 변환


2. **전송 계층 (Transport Layer)**
 - 계층 구조의 네트워크 구성요소와 프로토콜 내에서 송신자와 수신자를 연결하는
   통신 서비스를 제공
   - TCP: 애플리케이션 데이터를 송수신하며 정확한 전달을 중요시함
   - UDP: TCP와 대조적으로 정확성보다는 전송속도를 중요시


3. **네트워크 계층 (Network Layer)**
 - 중간 라우터를 통한 라우팅을 포함하여 패킷 포워딩을 담당하며, 매체 접근 제어, 흐름 제어, 오류 검사 역할
    - IP: 패킷을 목적지까지 전달
    - ICMP: IP의 통신오류를 전달
    - IPsec: 패킷을 암호화하여 전달
    - ARP: 네트워크 장비의 MAC 주소를 전달


4. **데이터 링크 계층 (Data Link Layer)**
 - 포인트 투 포인트 간 신뢰성있는 전송을 보장하기 위한 계층
 - 개체들 간 데이터를 전달하고 물리 계층에서 발생할 수 있는 오류를 찾아 내고
   수정하는데 필요한 기능적 절차적 수단을 제공
    - 이더넷: 일반 금속 케이블/광케이블을 통해 데이터 전달
    - PPP: 사용자 인증 후 원격지의 장비와 통신


<br></br>
## **참고자료**  

- 웹과 인터넷  
  
<https://www.w3.org/2003/glossary>  
  
<https://www.w3.org/Help/#webinternet>  
  
<https://opentutorials.org/module/3097/18040>  
  
<https://en.wikipedia.org/wiki/Application_layer>  
  
- C-S 모델  
  
<https://tcpschool.com/webbasic/works>  
  
<https://medium.com/videoblocks-engineering/web-architecture-101-a3224e126947>  
  
- HTTP  
  
<https://developer.mozilla.org/ko/docs/Web/HTTP>  
  
<https://gmlwjd9405.github.io/2018/10/27/webserver-vs-was.html>  
  
<https://stackoverflow.com/questions/4913343/what-is-the-difference-between-uri-url-and-urn>  
  
<https://images.app.goo.gl/1xy1N2pDwePWMbGn6>  
  
<http://www.hakawati.co.kr/361>  
  
- 프로토콜  
  
<https://en.wikipedia.org/wiki/Internet_protocol_suite>  
  
<https://33cram.tistory.com/60>  
  
<https://t1.daumcdn.net/cfile/tistory/163CBE334F9E92D12D>  
